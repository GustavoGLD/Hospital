@startuml

package "Streamlit e Interface de Usuário" {
  package "Views (Apresentação)" {

    class RoomView {
      + view_scheduling()
      + view_selection()
      + view_new_room_name()
      + view_new_rooms_count()
      + view_add_room_button()
      + view_add_all_rooms_button()
      + view_add_error_duplicate()
      + view_room_list()
    }

    class CirurgyView {
      + view_edit_possible_rooms()
      + view_edit_possible_teams()
      + view_edit_duration()
      + view_edit_priority()
      + view_edit_patient()
      + view_edit_name()
      + view_selection()
      + view_list_cirurgies()
      + view_add_cirurgy()
      + view_cirurgy_list()
    }

    class ProfessionalView {
      + view_selection()
      + view_new_professional_name()
      + view_add_professional_button()
      + view_add_error_duplicate()
      + view_professional_teams()

    }

    class TeamView {
      + view_scheduling()
      + view_selection()
      + view_new_team_name()
      + view_add_team_button()
      + view_add_error_duplicate()
      + view_doctor_responsible()
      + view_profissionals()
    }
  }

  package "Controllers (Lógica)" {

    class RoomController {
      + make_scheduling()
      + on_click_add_all_rooms()
      + on_change_rooms()
      + on_click_add_room()
      + select_room()
    }

    class CirurgyController {
      + on_change_possible_rooms()
      + on_change_possible_teams()
      + on_change_duration()
      + on_change_priority()
      + on_change_patient()
      + on_change_name()
      + on_selection()
      + make_list_view_dict()
      + on_submit()
    }

    class ProfessionalController {
      + select_professional()
      + on_click_add_professional()
      + on_change_professional()
      + on_change_teams()
    }

    class TeamController {
      + on_change_responsible()
      + on_change_responsible()
      + on_change_team()
      + on_change_professionals()
      + on_click_add_team()
      + select_team()
    }
  }
}
package "Lógica Interna" {
  package "Models (Dados)" {
    class RoomModel {
      - id
      - nome
      - cirurgias
    }

    class CirurgyModel {
      - id
      - nome
      - duracao
      - punicao
      - equipe
      - equipes_possiveis
      - tempo_inicio
      - sala
    }

    class ProfessionalModel {
      - nome
      - id
      - equipes
      - equipes_responsavel
    }

    class TeamModel {
      - nome
      - id
      - profissionais
      - medico_responsavel
    }

    class GenericModel {
      - nome
      - id
    }
  }

  package "Entities (Comportamento dos Dados)" {
    class RoomEntity {
      - model
      + add_cirurgy()
    }

    class CirurgyEntity {
      - model
      + add_team()
      + set_possible_teams()
      + set_room()
    }

    class ProfessionalEntity {
      - model
      + add_team()
      + set_possible_teams()
    }

    class TeamEntity {
      - model
      + add_professionals()
      + set_responsible_professional()
    }

    class GenericEntity {
      - model
    }
  }

  package "Repositories (Gerenciamento de Dados)" {
    class GenericRepository {
      + get_names()
      + get_by_id()
      + get_by_name(name: str)
      + get_names_with_id()
    }

    class RoomRepository {
        - rooms_list
    }

    class CirurgyRepository {
        - cirurgies_list
    }

    class ProfessionalRepository {
        - professionals_list
    }

    class TeamRepository {
        - teams_list
    }
  }
}

package "Services (Lógica)" {
  class Mediador {
    + registrar_cirurgia()
    + descobrir_cirurgia()
    + calcular_punicao()
    + pegar_cirurgias_nao_registradas()
    + pegar_equipes_livres()
    + limpar_registros()
  }

  class Algoritmo {
    + descobrir_cirurgias_das_salas()
    + registrar_cirurgia()
    + processar_salas()
    + calcular_proxima_desocupacao()
    + conferir_ordering()
    + executar()
    + imprimir_tabela()
  }

  class Otimizador {
   + gene_space()
   + fitness_func()
   + otimizar_punicao()
  }
}

' Connections between layers
RoomController --> RoomView: invoca
CirurgyController --> CirurgyView: invoca
ProfessionalController --> ProfessionalView: invoca
TeamController --> TeamView: invoca


RoomModel --> RoomEntity : converte
CirurgyModel --> CirurgyEntity : converte
ProfessionalModel --> ProfessionalEntity : converte
TeamModel --> TeamEntity : converte

RoomEntity --> RoomRepository : agrupa
CirurgyEntity --> CirurgyRepository : agrupa
ProfessionalEntity --> ProfessionalRepository : agrupa
TeamEntity --> TeamRepository : agrupa

RoomRepository --> RoomController
CirurgyRepository --> CirurgyController
ProfessionalRepository --> ProfessionalController
TeamRepository --> TeamController

RoomRepository --> Mediador
CirurgyRepository --> Mediador
ProfessionalRepository --> Mediador
TeamRepository --> Mediador

Mediador --> Algoritmo : Usa
Algoritmo --> Otimizador : consulta

@enduml
